BASIC KNOWLEDGE 
1. In java, any object created by new keyword exept primative data type
2. Construct string from char array
  ```java
  String newString = new String(charArray);
3. Utilities to work with java
copy array: System.arraycopy()
copy in range: java.util.Arrays.copyOfRange()
binary search: java.util.Arrays.binarySearch()
compare two arrays: java.util.Arrays.equals()
fill specific value: java.util.Arrays.fill()
Sorting: java.util.Arryas.sort() or parallelSort()
4. Expression is a construct made up of variables, operators and method invocation, that evaluates to a single value.
int cadence = 0;
anArray[0] = 100;
5. Statements are roughly equivalent to sentences in antural languages. A statement forms a unit of execution.
There are expression statement, declaration statemnet and control flow statement.
6. Recommend to use for range loop if possible
7. break and continue has unlabeled and label version. We can use label break and continue to jump to a label

CLASS AND OBJECT
1. In Java, no need to include class to other source file. It will automatically detect
2. When we define a public class, it require that the class name and file name must be match.
3. One class can inherit only one super class and can implement many interface.
3. Syntax
```java
[AccessModifier] class MyClass extends SuperClass implements MyInterface1,MyInterface2 {
  // fields, constructors
  // method declarations

}

Acess modifier: public, privated, protected used to determine what other classed can access MyClass.
5. Different with C++, we need to define explicitly access modifier for each class fields
public int speed;
private int gear;
6. Passing arbitrary number of Arguments
Like C++, to passing an arbitrary number of arguments to a function. We use varags.
Sytax:
public Polygon polygonFrom(Point... corners) {
  // Get number of sides
  int numberOfSides = corners.length;
  // Access vargs by index like normal array.
}
We can pass arguments to a vargs function using an array or seperated data.
7. In Java, passing arugment to function is by value, so that we can not change
the value of one variable inside a method. But if the argument is reference type (object), we can change the field of that object inside a method.
8. In Java, they typically use directly instance operator to call to method:
```java
int height = new Rectangle().height;
9. Access modifier
At the top level: public or package-private (also called default)
At member level: public, private, protected, package-private(default)

Class level:
+ A class maybe declared with access public keyword, it is visible to all classed everywhere.
+ If a class has no access modifier, it is visible only within its own package.
What is java package?

Member level:
private: access only by own class
default: acess by own class and class inside package
protected: access by own class, class inside package, subclass in other package
public: access by own class, class inside package, subclass and class in other package

10. class member syntax:
Same with C++
```java
static int classVariable;
```
Call it by syntax:
```java
ClassName.classMember or ClassName.classMethod()

11. Constants in java is defined in class scope only. You can't define constants in
main() or any other methods.

12. We can initialize static variable using:
+ Direct
+ Static initialization block:
```java
static {
  // Code to initialization
}
```
+ Use a private static method to initialize. Ofcourse, we can re-use it.
13. We can initialize instance members using:
+ Direct
+ Initizalizing Instance Members:
```java
{
  // Code is needed for initialization
}```
Java will copy the instance initialization to each constructor. So this method is useful if we want to use that code block inside all constructor.
+ Use final method, because it cannot overridden in a subclass.
```java
protected final varType initializeInstanceVariable() {
  // initialization code goes here
}```
14. Nested classed in java
+ A normal class inside one class is called inner class. It can acess
any field of the outer class. And it's created by calling new method on
one outer instance
```java
class OuterClass {
  ...
  class InnerClass {
    ...
  }
  ...
}

Then to create an InnerClass instance
OutterClass outter = new OutterClass();
InnerClass inner = outter.new InnerClass();

+ A static class inside one class is called static nested class. 
```java
class OuterClass {
  ...
  static class InnerClass {
    ...
  }
  ...
}```

15. enum
```java
public enum Planet {
  MERCURY,
  VENUS,
  EARTH
}```

enum is extended from java.lang.Enum. Also it has some method like: values()

ANNOTATION
is a form of metadata, provide data about a program that is not part of the program itself. It has no direct effect on the operation.
@Deprecated annotation indicates that the marked element is deprecated and should no longer be used. Compiler will generates a warning whenever a program useds a method, class or field with @Deprecated annotation.
@Deprecated
static void deprecatedMethod() {}

@Override informs the compiler that the element is meant to override an element
declared in a superclass.
int overrideMethod() {}

@SuppressWarnings tells the copiler to suppress specific warnings
@SuppressWarnings("deprecation")
void useDeprecatedMethod() {
  objectOne.deprecatedMethod();
}

Java lists two warning categories: deprecation and unchecked. To suppress multiple categories of warnings, use the following syntax:
@SuppressWarnings({"unchecked", "deprecation"})

In addition, there are @SafeVargs and @FunctionalInterface annotations too.

INTERFACE AND INHERITANCE
An interface declaration consists of modifiers, the keyword interface, interface
name, comma-separated list of parent interfaces (if any) and the interface body.

public interface GroupedInterface extends Interface1, Interface2, Interface3 {

  double E = 2.718;

  // Method signatures
  void doSomething(int i, double x);
  int doSomethingElse();
}

All methods in an interface are implicitly public.
All constant values in an interface are implicitly public, static and final.
You can not create an instance of Interface type, same with C++ pure virtual class.
When we want to add new method to old interface, we can:
1. Create new interface that extend old interface, then add new method there
2. Create static or default method with body

Use instanceof operator to check the actual type of an object

classes can have fields whereas interfaces can not.
OVERRIDING AND HIDING METHODS
An instance method in a subclass with the same signature (return, name, parameter type) as an instance method in superclass overrides the superclass's method.
We should add @Override annotation to help the compiler.

If a subclass defines a static method with the same signature as a static method in the superclass, then the method in the subclass hides the one in the superclass.

Use keyword super to call methods or fields of superclass that is hidden or overrid.

Similar with C++ operator overloading, we should override Object method to clone
or compare... between object
protected Object clone() throws CloneNotSupportedException from Cloneable interface
public boolean equals(Object obj) {
  if (obj isinstanceof Book) {
    return ISBN.equals((Book)obj.getISBN());
  }
  return false;
}

You should always override equals() method and override hashCode() as well
finalize() is override to free the resource
getClass() used to get information about class such as class name, superclas name, interface name
hashCode() is the object's hash code, wich is the object's memory address
toString() returns a String represent for the object

final class do not have any subclass
final method do not allowed to override
Method called from constructors should generally be declared final.

ABSTRACT CLASS AND METHOD
abstract class is a class that is declared with abstract keyword. It may or
may not include abstract methods. Abstract classed cannot be instantiated.
abstract method is a method that is declared without an implementation. If
a class contains abstract method, then the class itself must be declared abstract
```java
public abstract class GraphicObject {
  // declare fields
  // declare nonabstract methods
  abstract void draw();
}```

Note that methods in an interface that are not default or static are implicitly abstract. So that, it is unnecessary to declare them abstract.

Which should you use, abstract classes or interfaces?
. Consider using abstract classes in the following situation:
  + You want to share code among several closely related classes.
  + You expect that classes that extend your abstract class have many common
method or fields, or require access modifiers other than public
  + You want to declare non-static or non-final fields. 

. Consider using interfaces in the following situation:
  + You expect that unrelated classes would implement your interface
  + You want to specify the behavior of a partiular data type, but not
concern about who implements its behavior
  + You want to take advantage of multiple inheritance of type

PACKAGES
Package is a grouping of related types providing access protection and name
space management.
We should bundle classes and interface in a package in the following situation:
. You and other programmers can easily determine that these types are related
. You and other programmers know where to find types that can provide
provide graphics-related functions.
.The name of your types won't conflict with the type names in other packages because the package creates a new namespace
. You can allow types within package to have unrestricted access and restrict access for types outside the package.

Syntax:
Add ```package package_name``` at the top of every source file that you
want to include in the package.
Package name often named in the inversed order of company host name
com.google.FaceRecognition
org.microsoft.MSOffice

To use a type in a package, we should call its package name, follow its name
Ex:
graphics.Rectangle myRect = new graphics.Rectangle();

To use the shortcut name, we need to import keyword

  
